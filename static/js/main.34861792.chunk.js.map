{"version":3,"sources":["Store.js","Game.js","Setup.js","App.js","serviceWorker.js","index.js"],"names":["PouchDB","plugin","PouchDBFind","remoteURL","concat","opts","live","retry","db","replicate","from","on","info","sync","e","console","log","emptyBoard","x","y","b","Array","i","length","j","httpMatch","RegExp","Game","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","board","turn","winner","winningPositions","computerTurn","test","_this2","humanTurn","JSON","stringify","url","fullURL","req","Request","fetch","then","response","text","parseInt","col","setTimeout","doTurn","_this3","_this$state","row","pos","check_win","setState","player","getHeight","getWidth","count","w","push","_this4","title","waiting","getClass","val","row_in","className","indexOf","getCol","col_index","react_default","a","createElement","key","onClick","col_click","slice","reverse","map","row_index","index","getElement","restart","Component","defaultProps","Setup","player1","player2","playerList","getPlayers","query","doc","emit","type","name","reduce","keys","values","rereduce","unique_labels","forEach","label","results","rows","event","target","value","id","htmlFor","onChange","handleChange","play","disabled","STATE_SETUP","App","players","newPlayer","ts","Date","getTime","_id","put","savePlayer","src_Setup_0","p1","p2","startGame","resetState","src_Game_0","getMain","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.34861792.chunk.js","sourcesContent":["import PouchDB from 'pouchdb';\r\nimport PouchDBFind from 'pouchdb-find';\r\n\r\nPouchDB.plugin(PouchDBFind);\r\n\r\nconst dbName = 'c4';\r\nconst remoteURL = `http://evo.site:5984/${dbName}`;\r\nconst opts = { live: true, retry: true };\r\n\r\nexport const localDB = new PouchDB('localStore');\r\nexport const db = new PouchDB(dbName);\r\n\r\ndb.replicate.from(remoteURL).on('complete', function(info) {\r\n  db.sync(remoteURL, opts).on('error', e => console.log('Sync error', e));\r\n}).on('error', e => console.log('Inital sync error', e));\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Game.scss';\r\n\r\n//import { HUMAN } from './Setup';\r\n\r\nconst emptyBoard = (x, y) => {\r\n    let b = new Array(x);\r\n    for (let i = 0; i < b.length; i++) {\r\n\tb[i] = new Array(y);\r\n\tfor (let j = 0; j < b[i].length; j++) {\r\n\t    b[i][j] = 0;\r\n\t}\r\n    }\r\n\r\n    return b;\r\n};\r\n\r\nconst httpMatch = new RegExp(\"^https?://\");\r\n\r\nclass Game extends Component {\r\n\r\n    constructor(props) {\r\n\tsuper(props);\r\n\r\n\tthis.state = {\r\n\t    board: emptyBoard(7,6),\r\n\t    turn: 1,\r\n\t    winner: 0,\r\n\t    winningPositions: []\r\n\t};\r\n\r\n\tthis.computerTurn();\r\n    }\r\n\r\n    humanTurn() {\r\n\treturn !httpMatch.test(this.props[`player${this.state.turn}`]);\r\n    }\r\n\r\n    getCurrentName() {\r\n\treturn this.props[`player${this.state.turn}`];\r\n    }\r\n\r\n    computerTurn() {\r\n\tif (!this.humanTurn()) {\r\n\t    const board = JSON.stringify(this.state.board);\r\n\t    const url = this.props[`player${this.state.turn}`];\r\n\t    const fullURL = `${url}?gamestate=${board}`;\r\n\r\n\t    const req = new Request(fullURL);\r\n\t    fetch(req)\r\n\t\t.then(response => response.text())\r\n\t\t.then(response => parseInt(response))\r\n\t\t.then(col => setTimeout(() => this.doTurn(col), 250));\r\n\t}\r\n    }\r\n\r\n    col_click(e, col) {\r\n\tif (!this.humanTurn()) {\r\n\t    return;\r\n\t}\r\n\r\n\tthis.doTurn(col);\r\n    }\r\n\r\n    doTurn(col) {\r\n\tconst {board, turn} = this.state;\r\n\tconst row = board[col];\r\n\tlet winner = 0;\r\n\tlet pos = -1;\r\n\t\r\n\tfor (let i = row.length - 1; i >= 0 ; i--) {\r\n\t    if (row[i] === 0) {\r\n\t\tpos = i;\r\n\t    }\r\n\t}\r\n\r\n\tif (pos < 0) {\r\n\t    this.computerTurn();\r\n\t    return false;\r\n\t}\r\n\t\r\n\tif (this.state.winner > 0) {\r\n\t    return false;\r\n\t}\r\n\r\n\trow[pos] = turn;\r\n\tboard[col] = row;\r\n\r\n\tif (this.check_win(1, board)) {\r\n\t    winner = 1;\r\n\t}\r\n\tif (this.check_win(2, board)) {\r\n\t    winner = 2;\r\n\t}\r\n\t\r\n\tthis.setState({board: board, turn: turn === 1 ? 2 : 1, winner: winner}, () => this.computerTurn());\r\n\treturn true;\r\n    }\r\n\r\n    check_win(player, board) {\r\n\tconst winCount = 4;\r\n\tconst getHeight = () => board.length + 1;\r\n\tconst getWidth = () => board[0].length + 1;\r\n\t\r\n\t// horizontalCheck \r\n\tfor (let j = 0; j < getHeight() - (winCount - 1) ; j++ ) {\r\n\t    for (let i = 0; i < getWidth(); i++) {\r\n\t\tlet count = 0;\r\n\t\tlet winningPositions = [];\r\n\t\tfor (let w = 0 ; w < winCount ; w++) {\r\n\t\t    if (board[i][j+w] === player) {\r\n\t\t\tcount += 1;\r\n\t\t\twinningPositions.push(`${i}:${j+w}`);\r\n\t\t    }\r\n\t\t}\r\n\t\tif (count === winCount) {\r\n\t\t    this.setState({winningPositions: winningPositions});\r\n\t\t    return true;\r\n\t\t}           \r\n\t    }\r\n\t}\r\n\t// verticalCheck\r\n\tfor (let i = 0; i < getWidth()-3 ; i++ ){\r\n\t    for (let j = 0; j < getHeight(); j++){\r\n\t\tvar count = 0;\r\n\t\tlet winningPositions = [];\r\n\t\tfor (let w = 0 ; w < winCount ; w++) {\r\n\t\t    if (board[i+w][j] === player) {\r\n\t\t\tcount++;\r\n\t\t\twinningPositions.push(`${i+w}:${j}`);\r\n\t\t    }\r\n\t\t}\r\n\t\tif (count === winCount) {\r\n\t\t    this.setState({winningPositions: winningPositions});\r\n\t\t    console.log(board);\r\n\t\t    return true;\r\n\t\t}           \r\n\t    }\r\n\t}\r\n\t// ascendingDiagonalCheck \r\n\tfor (let i=3; i < getWidth(); i++){\r\n\t    for (let j=0; j < getHeight()-3; j++){\r\n\t\tlet count = 0;\r\n\t\tlet winningPositions = [];\r\n\t\tfor (let w = 0 ; w < winCount ; w++) {\r\n\t\t    if (board[i-w][j+w] === player) {\r\n\t\t\tcount++;\r\n\t\t\twinningPositions.push(`${i-w}:${j+w}`);\r\n\t\t    }\r\n\t\t}\r\n\t\tif (count === winCount) {\r\n\t\t    this.setState({winningPositions: winningPositions});\r\n\t\t    return true;\r\n\t\t}\r\n\t    }\r\n\t}\r\n\t// descendingDiagonalCheck\r\n\tfor (let i=3; i < getWidth(); i++){\r\n\t    for (let j=3; j < getHeight(); j++){\r\n\t\tlet count = 0;\r\n\t\tlet winningPositions = [];\r\n\t\tfor (let w = 0 ; w < winCount ; w++) {\r\n\t\t    if (board[i-w][j-w] === player) {\r\n\t\t\tcount++;\r\n\t\t\twinningPositions.push(`${i-w}:${j-w}`);\r\n\t\t    }\r\n\t\t}\r\n\t\tif (count === winCount) {\r\n\t\t    this.setState({winningPositions: winningPositions});\r\n\t\t    return true;\r\n\t\t}\r\n\t    }\r\n\t}\r\n\t\r\n\treturn false;\r\n    }\r\n\r\n    \r\n    render() {\r\n\tconst title = this.state.winner === 0 ? `Player ${this.state.turn}` : `Winner ${this.state.winner}`;\r\n\tconst waiting = this.humanTurn() || this.state.winner > 0 ? '' : ' - waiting on AI';\r\n\tconst getClass = (val, row_in, col) => {\r\n\t    const row = (this.state.board[0].length - row_in) - 1;\r\n\t    let className = (val === 1) ? 'red' : (val === 2) ? 'yellow' : '';\r\n\r\n\t    console.log(`${col}:${row}`);\r\n\t    if (this.state.winningPositions.indexOf(`${col}:${row}`) > -1) {\r\n\t\tconsole.log('winner');\r\n\t\tclassName = `${className} winner`;\r\n\t    }\r\n\r\n\t    return className;\r\n\t};\r\n\tconst getElement = (e, index, col) => <div key={index} className={ getClass(e, index, col) + \" item\"}>{ e }</div>;\r\n\tconst getCol = (col, col_index) => <div key={col_index} className=\"col\" onClick={ (e, i) => this.col_click(e, col_index) }>{ col.slice(0).reverse().map((e, row_index) => getElement(e, row_index, col_index)) }</div>;\r\n\t\r\n\treturn (\r\n\t    <div>\r\n\t      <div>Game - { title }{ waiting }</div>\r\n\t      <div>\r\n\t\t<button onClick={ () => this.props.restart() }>Reset</button>\r\n\t      </div>\r\n\t      <div className={ \"game\" }>\r\n\t\t{ this.state.board.map((col, col_index) => getCol(col, col_index)) }\r\n\t      </div>\r\n            </div>\r\n\t);\r\n    }\r\n}\r\n\r\nGame.propTypes = {\r\n    restart: PropTypes.func.isRequired,\r\n    player1: PropTypes.string.isRequired,\r\n    player2: PropTypes.string.isRequired\r\n};\r\n\r\nGame.defaultProps = {\r\n    restart: () => console.log('Reset')\r\n};\r\n\r\n\r\nexport default Game;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { db, localDB } from './Store';\r\n\r\nimport './Setup.css';\r\n\r\nexport const HUMAN = 'Human';\r\n\r\nclass Setup extends Component {\r\n    constructor(props) {\r\n\tsuper(props);\r\n\r\n\tthis.state = {\r\n\t    player1: props.player1,\r\n\t    player2: props.player2,\r\n\t    playerList: []\r\n\t};\r\n\r\n\tthis.getPlayers();\r\n    }\r\n\r\n    getPlayers() {\r\n\tdb.query({\r\n\t    map: function(doc, emit) {\r\n\t\tif (doc.type == 'player') {\r\n\t\t    emit(doc.name);\r\n\t\t}\r\n\t    },\r\n\t    reduce: function(keys, values, rereduce) {\r\n\t\tconsole.log(keys, values, rereduce);\r\n\t\tconst unique_labels = {};\r\n\t\tvalues.forEach((label) => {\r\n\t\t    if(!unique_labels[label]) {\r\n\t\t\tunique_labels[label] = true;\r\n\t\t    }\r\n\t\t});\r\n\t\t\r\n\t\treturn unique_labels;\r\n\t    }\r\n\t}).then(results => {\r\n\t    console.log(results);\r\n\t    this.setState({playerList: results.rows});\r\n\t});\r\n    }\r\n\r\n\r\n    handleChange(key, event) {\r\n\tconst state = [];\r\n\r\n\tstate[key] = event.target.value;\r\n\t\r\n\tthis.setState(state);\r\n    }\r\n    \r\n    render() {\r\n\tconst { player1, player2 } = this.state;\r\n\r\n\tconst playerList = this.state.playerList.map(e => {\r\n\t    return (<div key={ e.id }>{ e.key }</div>);\r\n\t});\r\n\r\n\t\r\n\treturn (\r\n\t    <div className=\"Setup\">\r\n\t      <div>Setup</div>\r\n\t      <div>\r\n\t\t<p>\r\n\t\t  <label htmlFor=\"player_1\">Player 1</label>\r\n\t\t  <input id=\"player_1\" type=\"text\" value={ this.state.player1 } onChange={ e => this.handleChange('player1', e) } />\r\n\t\t</p>\r\n\t\t<p>\r\n\t\t  <label htmlFor=\"player_2\">Player 2</label>\r\n\t\t  <input id=\"player_2\" type=\"text\" value={ this.state.player2 } onChange={ e => this.handleChange('player2', e) } />\r\n\t\t</p>\r\n\t\t<p>\r\n\t\t  <button onClick={ () => this.props.play(player1, player2) } disabled={ player1 === '' || player2 === '' }>Play</button>\r\n\t\t</p>\r\n\t      </div>\r\n\t    </div>\r\n\t);\r\n    }\r\n}\r\n\r\nSetup.propTypes = {\r\n    play: PropTypes.func.isRequired,\r\n    player1: PropTypes.string,\r\n    player2: PropTypes.string\r\n};\r\n\r\nSetup.defaultProps = {\r\n    play: (player1, player2) => console.log(player1, 'vs', player2),\r\n    player1: '',\r\n    player2: ''\r\n};\r\n\r\nexport default Setup;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nimport { db, localDB } from './Store';\r\n\r\nimport Game from './Game';\r\nimport Setup from './Setup';\r\n\r\n\r\nconst STATE_SETUP = 'setup';\r\nconst STATE_PLAYING = 'playing';\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n\tsuper(props);\r\n\r\n\tthis.state = {\r\n\t    state: STATE_SETUP,\r\n\t    player1: 'Human',\r\n\t    player2: 'Human',\r\n\t    players: []\r\n\t};\r\n    }\r\n\r\n    savePlayer(player) {\r\n\tconst currentDate = new Date();\r\n\tconst newPlayer = {\r\n\t    type: 'player',\r\n\t    name: player,\r\n\t    ts: currentDate.getTime()\r\n\t};\r\n\r\n\tnewPlayer._id = `${newPlayer.name}:${newPlayer.ts}`;\r\n\r\n\tdb.put(newPlayer);\r\n    }\r\n\t\t\r\n    startGame(player1, player2) {\r\n\tthis.savePlayer(player1);\r\n\tthis.savePlayer(player2);\r\n\t\r\n\tthis.setState({\r\n\t    player1: player1,\r\n\t    player2: player2,\r\n\t    state: STATE_PLAYING\r\n\t});\r\n    }\r\n\r\n    getMain() {\r\n\tif (this.state.state === STATE_SETUP) {\r\n\t    return <Setup play={ (p1, p2) => this.startGame(p1, p2) } player1={ this.state.player1 } player2={ this.state.player2 } />;\r\n\t} else {\r\n\t    const { player1, player2 } = this.state;\r\n\t    const resetState = {\r\n\t\tstate: STATE_SETUP\r\n\t    };\r\n\t    return <Game restart={ () => this.setState(resetState) } player1={ player1 } player2={ player2 } />;\r\n\t}\r\n    }\r\n    \r\n    render() {\r\n\treturn (\r\n\t    <div className=\"App\">\r\n              <header className=\"App-header\">\r\n\t\t{\r\n\t\t    this.getMain()\r\n\t\t}\r\n\t      </header>\r\n\t    </div>\r\n\t);\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}